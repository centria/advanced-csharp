{"componentChunkName":"component---src-templates-docs-js","path":"/part10/part10-3","result":{"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Enum\",\n  \"nav_order\": 103,\n  \"hidden\": false\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Exercise = makeShortcode(\"Exercise\");\nvar Note = makeShortcode(\"Note\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"enumerated-type---enum\"\n  }, \"Enumerated Type - Enum\"), mdx(\"p\", null, \"If we know the possible values \\u200B\\u200Bof a variable in advance, we can use a class of type \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"enum\"), \", i.e., enumerated type to represent the values. Enumerated types are their own type in addition to being normal classes and interfaces. An enumerated type is defined by the keyword \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"enum\"), \". For example, the following Suit enum class defines four constant values: Diamond, Spade, Club and Heart.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"namespace Exercise001\\n{\\n  public enum Suit\\n  {\\n    Diamond,\\n    Spade,\\n    Club,\\n    Heart\\n  }\\n}\\n\")), mdx(\"p\", null, \"In its simplest form, enum lists the constant values \\u200B\\u200Bit declares, separated by a comma. Enum types, i.e., constants, are conventionally written with capital first letters.\"), mdx(\"p\", null, \"An Enum is (usually) written in its own file, much like a class or interface.\"), mdx(\"p\", null, \"The following is a Card class where the suit is represented by an enum:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"namespace Exercise001\\n{\\n  public class Card\\n  {\\n    public int value { get; }\\n    public Suit suit { get; }\\n\\n    public Card(int value, Suit suit)\\n    {\\n      this.value = value;\\n      this.suit = suit;\\n    }\\n\\n    public override string ToString()\\n    {\\n      return suit + \\\" \\\" + value;\\n    }\\n  }\\n}\\n\")), mdx(\"p\", null, \"The card is used in the following way:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"namespace Exercise001\\n{\\n  using System;\\n\\n  class Program\\n  {\\n    static void Main(string[] args)\\n    {\\n      Card first = new Card(10, Suit.Heart);\\n\\n      Console.WriteLine(first);\\n\\n      if (first.suit == Suit.Spade)\\n      {\\n        Console.WriteLine(\\\"is a spade\\\");\\n      }\\n      else\\n        Console.WriteLine(\\\"is not a spade\\\");\\n    }\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Heart 10\\nis not a spade\\n\")), mdx(\"p\", null, \"We see that the Enum values are outputted nicely! You can find out more about Enum from this \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/enum\"\n  }, mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"Microsoft documentation\")), \".\"), mdx(\"p\", null, \"Each enum field gets a unique number code, and they can be compared using the equals sign. Just as other classes in c#, these values also inherit the Object class and its Equals method. The Equals method compares this numeric identifier in enum types too.\"), mdx(\"p\", null, \"The numeric identifier of an enum field value can be found by casting them into integers. The method actually returns an order (or indexing) number - if the enum value is presented first, its order number is 0. If its second, the order number is 1, and so on. For example\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"Console.WriteLine((int)Suit.Spade);\\nConsole.WriteLine((int)Suit.Diamond);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"1\\n0\\n\")), mdx(\"h1\", {\n    \"id\": \"exercises\"\n  }, \"Exercises\"), mdx(Exercise, {\n    title: '005 Sort Them Cards!',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"The exercise template has a class that represents a playing card. Each card has a value and a suit. \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Section 1\")), mdx(\"p\", null, \"Card's value is represented as a number \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"2, 3, ..., 14\"), \" and its suit as \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Club, Diamond, Heart or Spade\"), \". Ace's value is 14. The value is represented with an integer, and the suit as an enum. \"), mdx(\"p\", null, \"Cards also have a method \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ToString\"), \", which can be used to print the value and the suit in a readable form. \"), mdx(\"p\", null, \"Fix the ToString to include special returns for the face cards (J, Q, K and A).\"), mdx(\"p\", null, \"New cards can be created like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"Card first = new Card(2, Suit.Diamond);\\nCard second = new Card(14, Suit.Spade);\\nCard third = new Card(12, Suit.Heart);\\n\\nConsole.WriteLine(first);\\nConsole.WriteLine(second);\\nConsole.WriteLine(third);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Diamond 2\\nSpade A\\nHeart Q\\n\")), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"In the ToString, make sure you have special returns for values 11 to 14 (J, Q, K and A respectively).\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Section 2\")), mdx(\"p\", null, \"Change the Card class to implement the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"IComparable\"), \". Implement the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"CompareTo\"), \" method so that using it sorts the cards ascending by their value. If the cards being compared have the same value, they are sorted by \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"club first, diamond next, heart third, and spade last\"), \", i.e. in the order of enums.\"), mdx(\"p\", null, \"So, for this sorting, the least valuable card is two of clubs, and highest the ace of spades.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"Card first = new Card(2, Suit.Club);\\nCard second = new Card(14, Suit.Spade);\\nCard third = new Card(12, Suit.Heart);\\nCard fourth = new Card(14, Suit.Heart);\\nCard fifth = new Card(12, Suit.Diamond);\\n\\nList<Card> list = new List<Card> { first, second, third, fourth, fifth };\\nlist.Sort();\\nlist.ForEach(Console.WriteLine);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Club 2\\nDiamond Q\\nHeart Q\\nHeart A\\nSpade A\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Section 3\")), mdx(\"p\", null, \"Create a class \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Hand\"), \" to represent the cards in player's hand. Add the following to the class:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"private List<Card\", \">\"), \" to store the cards\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"public void Add(Card card)\"), \" adds a card to the hand. If the card is already in the hand, someone is cheating, and the card should not be added. \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Use a List to store the cards.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"public void Print()\"), \" prints the cards in hand as shown in the example below\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"Hand hand = new Hand();\\n\\nhand.Add(new Card(2, Suit.Diamond));\\nhand.Add(new Card(14, Suit.Spade));\\nhand.Add(new Card(12, Suit.Heart));\\nhand.Add(new Card(2, Suit.Spade));\\n\\nhand.Print();\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Diamond 2\\nSpade A\\nHeart Q\\nSpade 2\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Section 4\")), mdx(\"p\", null, \"Add a method \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"public void Sort()\"), \" to Hand class, which sorts the cards in the hand. After sorting, the cards are printed out in order:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"Hand hand = new Hand();\\n\\nhand.Add(new Card(2, Suit.Diamond));\\nhand.Add(new Card(14, Suit.Spade));\\nhand.Add(new Card(12, Suit.Heart));\\nhand.Add(new Card(2, Suit.Spade));\\n\\nhand.Sort();\\nhand.Print();\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Diamond 2\\nSpade 2\\nHeart Q\\nSpade A\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Section 5\")), mdx(\"p\", null, \"In a card game, hands are ranked based on the sum of values of its cards. Modify the Hand class to be comparable based on this criteria, i.e. change the class so that interface \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"IComparable\\\\<Hand\", \">\"), \" applies to it.\"), mdx(\"p\", null, \"Here's an example of a program that compares the hands:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"Hand hand1 = new Hand();\\n\\nhand1.Add(new Card(2, Suit.Diamond));\\nhand1.Add(new Card(14, Suit.Spade));\\nhand1.Add(new Card(12, Suit.Heart));\\nhand1.Add(new Card(2, Suit.Spade));\\n\\nHand hand2 = new Hand();\\n\\nhand2.Add(new Card(11, Suit.Diamond));\\nhand2.Add(new Card(11, Suit.Spade));\\nhand2.Add(new Card(11, Suit.Heart));\\n\\nint comparison = hand1.CompareTo(hand2);\\n\\nif (comparison < 0)\\n{\\n  Console.WriteLine(\\\"better hand is\\\");\\n  hand2.Print();\\n}\\nelse if (comparison > 0)\\n{\\n  Console.WriteLine(\\\"better hand is\\\");\\n  hand1.Print();\\n}\\nelse\\n{\\n  Console.WriteLine(\\\"hands are equal\\\");\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"better hand is\\nDiamond J\\nSpade J\\nHeart J\\n\"))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#enumerated-type---enum","title":"Enumerated Type - Enum"},{"url":"#exercises","title":"Exercises"}]},"frontmatter":{"title":"Enum"}}},"pageContext":{"id":"3a0f54aa-027a-5555-927b-94456b30fa3c"}},"staticQueryHashes":["1885717130","1950529541","2744905544","3020054368"]}